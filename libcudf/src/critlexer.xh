// {{{ MIT License

// Copyright 2017 Roland Kaminski

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

// }}}

/*!re2c
    ADD  = "+";
    SUB  = "-";
    ATTR = [a-z][a-z0-9\-]*;
    EOF  = [\000];
    ANY  = [\001-\377];
*/

int CritParser::lex() {
    for(;;) {
        start();
        /*!re2c
            EOF                { return 0; }
            ","                { return PARSER_COMMA; }
            "-"                { token_.maximize = false; return PARSER_SIGN; }
            "+"                { token_.maximize = true;  return PARSER_SIGN; }
            "("                { return PARSER_LPAREN; }
            ")"                { return PARSER_RPAREN; }
            "solution"         { return PARSER_SOLUTION; }
            "changed"          { return PARSER_CHANGED; }
            "new"              { return PARSER_NEW; }
            "removed"          { return PARSER_REMOVED; }
            "up"               { return PARSER_UP; }
            "down"             { return PARSER_DOWN; }
            "installrequest"   { return PARSER_INSTALLREQUEST; }
            "upgraderequest"   { return PARSER_UPGRADEREQUEST; }
            "request"          { return PARSER_REQUEST; }
            "count"            { return PARSER_COUNT; }
            "sum"              { return PARSER_SUM; }
            "notuptodate"      { return PARSER_NOTUPTODATE; }
            "unsat_recommends" { return PARSER_UNSAT_RECOMMENDS; }
            "aligned"          { return PARSER_ALIGNED; }
            ATTR               { token_.string = &string(string()); return PARSER_ATTR; }
            ANY                { syntaxError(); return 0; }
        */
    }
    return 0;
}
