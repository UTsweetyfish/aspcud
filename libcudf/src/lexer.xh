// {{{ MIT License

// Copyright 2017 Roland Kaminski

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

// }}}

/*!re2c
    EOF              = [\000];
    QUOTED           = "\"" ([^\r\n"\\] | "\\\\" | "\\\"" | ("\\"[^\r\n"\\]))* "\"";
    NL               = [\r\n]+;
    COMMENT          = "#" [^\n]*;
    PREAMBLE         = "preamble";
    PACKAGE          = "package";
    REQUEST          = "request";
    TYPE_BOOL        = "bool";
    TYPE_INT         = "int";
    TYPE_NAT         = "nat";
    TYPE_POSINT      = "posint";
    TYPE_STRING      = "string";
    TYPE_PKGNAME     = "pkgname";
    TYPE_IDENT       = "ident";
    TYPE_VPKG        = "vpkg";
    TYPE_VEQPKG      = "veqpkg";
    TYPE_VPKGFORMULA = "vpkgformula";
    TYPE_VPKGLIST    = "vpkglist";
    TYPE_VEQPKGLIST  = "veqpkglist";
    TYPE_ENUM        = "enum";
    TRUE             = "true";
    FALSE            = "false";
    COLONSP          = ": ";
    COLON            = ":";
    SPACE            = [ \t];
    IDENT            = [a-z][a-z0-9\-]*;
    POSINT           = "+"?[0-9]*[1-9]+[0-9]*;
    NAT              = "+"?[0]+;
    INT              = "-"[0-9]+;
    PKGNAME          = [A-Za-z0-9\-+./@()%]+;
    COMMA            = ",";
    EQUAL            = "=";
    BAR              = "|";
    TRUEX            = "true!";
    FALSEX           = "false!";
    NEQ              = "!=";
    GEQ              = ">=";
    GTH              = ">";
    LEQ              = "<=";
    LTH              = "<";
    LBRAC            = "[";
    RBRAC            = "]";
    ANY              = [\000-\377];
*/

int Parser::lex() {
    for(;;) {
        start();
        /*!re2c
            EOF              { return 0; }
            NL               { return PARSER_NL; }
            COLONSP          { return PARSER_COLONSP; }
            COLON            { return PARSER_COLON; }
            TRUEX            { return PARSER_TRUEX; }
            FALSEX           { return PARSER_FALSEX; }
            COMMENT          { return PARSER_NL; }
            COMMA            { return PARSER_COMMA; }
            BAR              { return PARSER_BAR; }
            EQUAL            { token_.index = EQ; return PARSER_EQUAL; }
            NEQ              { token_.index = NEQ; return PARSER_RELOP; }
            GEQ              { token_.index = GE; return PARSER_RELOP; }
            GTH              { token_.index = GT; return PARSER_RELOP; }
            LEQ              { token_.index = LE; return PARSER_RELOP; }
            LTH              { token_.index = LT; return PARSER_RELOP; }
            LBRAC            { return PARSER_LBRAC; }
            RBRAC            { return PARSER_RBRAC; }
            SPACE            { continue; }
            QUOTED           { token_.index = dep_.index(string(1, 1)); return PARSER_QUOTED; }
            PREAMBLE         { token_.index = dep_.index(string()); return PARSER_PREAMBLE; }
            PACKAGE          { token_.index = dep_.index(string()); return PARSER_PACKAGE; }
            REQUEST          { token_.index = dep_.index(string()); return PARSER_REQUEST; }
            TYPE_BOOL        { token_.index = dep_.index(string()); return PARSER_TYPE_BOOL; }
            TYPE_INT         { token_.index = dep_.index(string()); return PARSER_TYPE_INT; }
            TYPE_NAT         { token_.index = dep_.index(string()); return PARSER_TYPE_NAT; }
            TYPE_POSINT      { token_.index = dep_.index(string()); return PARSER_TYPE_POSINT; }
            TYPE_STRING      { token_.index = dep_.index(string()); return PARSER_TYPE_STRING; }
            TYPE_PKGNAME     { token_.index = dep_.index(string()); return PARSER_TYPE_PKGNAME; }
            TYPE_IDENT       { token_.index = dep_.index(string()); return PARSER_TYPE_IDENT; }
            TYPE_VPKG        { token_.index = dep_.index(string()); return PARSER_TYPE_VPKG; }
            TYPE_VEQPKG      { token_.index = dep_.index(string()); return PARSER_TYPE_VEQPKG; }
            TYPE_VPKGFORMULA { token_.index = dep_.index(string()); return PARSER_TYPE_VPKGFORMULA; }
            TYPE_VPKGLIST    { token_.index = dep_.index(string()); return PARSER_TYPE_VPKGLIST; }
            TYPE_VEQPKGLIST  { token_.index = dep_.index(string()); return PARSER_TYPE_VEQPKGLIST; }
            TYPE_ENUM        { token_.index = dep_.index(string()); return PARSER_TYPE_ENUM; }
            TRUE             { token_.index = dep_.index(string()); return PARSER_TRUE; }
            FALSE            { token_.index = dep_.index(string()); return PARSER_FALSE; }
            POSINT           { token_.index = dep_.index(string()); return PARSER_POSINT; }
            NAT              { token_.index = dep_.index(string()); return PARSER_NAT; }
            INT              { token_.index = dep_.index(string()); return PARSER_INT; }
            IDENT            { token_.index = dep_.index(string()); return PARSER_IDENT; }
            PKGNAME          { token_.index = dep_.index(string()); return PARSER_PKGNAME; }
            ANY              { syntaxError(); }
        */
    }
    return 0;
}

int Parser::lexString() {
    start();
start:
    /*!re2c
        [^\n\r] { goto start; }
        [\n\r]  { unget(); token_.index = dep_.index(string()); return PARSER_STRING; }
        ANY     { syntaxError(); }
    */
    return 0;
}
